name: CI/CD

on:
  push:
    branches: 
      - main
  # Puedes incluir pull_request, tags, etc.

jobs:
  build-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Install dependencies
        run: npm install

      - name: Build
        run: npm run build

      - name: Test
        run: npm test
      
      # (Opcional) Enviar reporte de pruebas a SonarQube 
      # si manejas algo como 'sonar-scanner'
      # - name: SonarQube analysis
      #   run: sonar-scanner

  publish-image:
    runs-on: ubuntu-latest
    needs: build-test  # Se ejecuta sólo si build-test fue exitoso
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Inicia sesión en Amazon ECR
      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1
        with:
          # OJO, la región que uses
          aws-region: us-east-1

      - name: Build, tag and push image to ECR
        run: |
          # Reemplaza 'dockerimaginamos' o 'my-docker-image' 
          # por el nombre que uses en tu Dockerfile
          docker build -t cesarapp .

          # Etiquetamos la imagen
          docker tag cesarapp:latest 123456789012.dkr.ecr.us-east-1.amazonaws.com/cesarapp:latest

          # Subimos la imagen
          docker push 123456789012.dkr.ecr.us-east-1.amazonaws.com/cesarapp:latest

  deploy-eks:
    runs-on: ubuntu-latest
    needs: publish-image  # Se ejecuta sólo si publish-image fue exitoso
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Configura credenciales de AWS
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      # Actualiza kubeconfig para usar tu clúster EKS
      - name: Update Kubeconfig
        run: aws eks update-kubeconfig --name rappi-web-eks-cluster --region us-east-1

      # Aplica tu archivo(s) deployment.yaml para desplegar cesarapp
      - name: Deploy to EKS
        run: |
          kubectl apply -f deployment.yaml
